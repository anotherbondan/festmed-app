import Head from "next/head";
import {
  Container,
  Spinner,
  Avatar,
  Card,
  HStack,
  Stack,
  Text,
  Flex,
  Box,
  IconButton,
  Spacer,
} from "@chakra-ui/react";
import { useFetchPosts } from "@/features/useFetchPosts";
import { useMutation, useQuery } from "@tanstack/react-query";
import { findAccountById } from "@/features/findAccountById";
import { LuHeart, LuMessageCircle, LuShare, LuTrash2 } from "react-icons/lu";
import { Navbar } from "@/components/ui/navbar";
import { CreateNewPost } from "@/components/ui/create-new-post";
import { useFormik } from "formik";
import { axiosInstance } from "@/lib/axios";
import axios from "axios";

export default function Home() {
  const { data: postsData, isLoading } = useFetchPosts();

  const formik = useFormik({
    initialValues: {
      userId: "5",
      content: "",
    },
    onSubmit: () => {
      createPost(undefined, {
        onSuccess: () => {
          window.location.reload();
        },
      });
    },
  });

  const handleNewPost = (event) => {
    formik.setFieldValue(event.target.name, event.target.value);
  };

  const { mutate: createPost } = useMutation({
    mutationFn: async () => {
      const { userId, content } = formik.values;
      const postsResponse = await axiosInstance.post(
        `/accounts/${userId}/posts`,
        {
          content,
          userId,
        }
      );
      return postsResponse;
    },
  });

  const { mutate: deletePost } = useMutation({
    mutationFn: async (postId) => {
      await axiosInstance.delete(`/accounts/5/posts/${postId}`);
      window.location.reload();
    },
  });

  const Post = ({ post }) => {
    const { data: user } = useQuery({
      queryKey: ["user", post.userId],
      queryFn: () => {
        return findAccountById(post.userId);
      },
    });

    return (
      <Card.Root width="640px" mb={3} mx="auto">
        <Card.Body>
          <HStack mb="6" gap="3" flex>
            <Avatar.Root>
              <Avatar.Image src={user?.profilePhoto} />
              <Avatar.Fallback name={user?.profileName} />
            </Avatar.Root>
            <Stack gap="0">
              <Text fontWeight="semibold" textStyle="sm">
                {user?.profileName}
              </Text>
              <Text color="fg.muted" textStyle="sm">
                {`@${user?.username}`}
              </Text>
            </Stack>
            <Spacer />
            <Card.Description right={0}>
              {new Date(post.createdAt).toLocaleString()}
            </Card.Description>
          </HStack>
          <Text marginLeft="4px">{post.content}</Text>
        </Card.Body>
        <Card.Footer>
          <IconButton aria-label="Like post" variant="ghost" rounded="full">
            <LuHeart />
          </IconButton>
          <IconButton aria-label="Comment post" variant="ghost" rounded="full">
            <LuMessageCircle />
          </IconButton>
          <IconButton aria-label="Share post" variant="ghost" rounded="full">
            <LuShare />
          </IconButton>
          <IconButton
            aria-label="Share post"
            variant="ghost"
            rounded="full"
            alignSelf="end"
            onClick={() => deletePost(post.id)}
          >
            <LuTrash2 />
          </IconButton>
        </Card.Footer>
      </Card.Root>
    );
  };

  const renderPosts = () => {
    return postsData?.data
      ?.slice()
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
      .map((post) => {
        return <Post key={post.id} post={post} />;
      });
  };

  return (
    <>
      <Head>
        <title>FESTMED</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          <Navbar />
          <Box>
            <CreateNewPost
              handleFunc={handleNewPost}
              submitFunc={formik.handleSubmit}
            />
            {renderPosts()}
            {isLoading && (
              <Flex
                position="fixed"
                top="0"
                left="0"
                w="100vw"
                h="100vh"
                align="center"
                justify="center"
              >
                <Spinner size="xl" borderWidth="4px" animationDuration="0.8s" />
              </Flex>
            )}
          </Box>
        </Container>
      </main>
    </>
  );
}
